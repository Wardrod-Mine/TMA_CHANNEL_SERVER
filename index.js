// bot/index.js
require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { message } = require('telegraf/filters');
const express = require('express');
const app = express();
const BOT_TOKEN = process.env.BOT_TOKEN;
const APP_URL   = process.env.APP_URL;

// –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω-—á–∞—Ç–æ–≤
const ADMIN_CHAT_IDS = (process.env.ADMIN_CHAT_IDS || process.env.ADMIN_CHAT_ID || '')
  .split(/[,\s]+/)          // —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –ø—Ä–æ–±–µ–ª
  .map(s => s.trim())
  .filter(Boolean)
  .map(Number)
  .filter(Number.isFinite);

const ADMIN_THREAD_ID = process.env.ADMIN_THREAD_ID ? Number(process.env.ADMIN_THREAD_ID) : null;

if (!BOT_TOKEN) throw new Error('–ù–µ—Ç BOT_TOKEN –≤ .env');
if (!APP_URL)   console.warn('APP_URL –Ω–µ –∑–∞–¥–∞–Ω: –∫–Ω–æ–ø–∫–∞ web_app –Ω–µ –æ—Ç–∫—Ä–æ–µ—Ç –¢–ú–ê');

const bot = new Telegraf(BOT_TOKEN);

bot.command('test_admin', async (ctx) => {
  const ok = await notifyAdmins(ctx, '<b>–¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>',);
  ctx.reply(ok ? '–û–∫ ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ' : '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚ùóÔ∏è', { parse_mode:'HTML' });
});

// /start —Å –ø–µ–π–ª–æ–∞–¥–æ–º -> –æ—Ç–∫—Ä—ã–≤–∞–µ–º –¢–ú–ê –Ω–∞ –Ω—É–∂–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–µ
bot.start(async (ctx) => {
  const payload = (ctx.startPayload || 'tma').trim();
  const url = `${APP_URL}?tgWebAppStartParam=${encodeURIComponent(payload)}`;
  await ctx.reply(
    '–û—Ç–∫—Ä–æ–π—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:',
    Markup.inlineKeyboard([[Markup.button.webApp('–û—Ç–∫—Ä—ã—Ç—å –¢–ú–ê', url)]])
  );
});

// —Å–µ—Ä–≤–∏—Å: –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å chat.id
bot.command('id', (ctx) => ctx.reply(
  `chat.id: <code>${ctx.chat.id}</code>\nuser.id: <code>${ctx.from.id}</code>`, { parse_mode: 'HTML' }
));
bot.command('ping', (ctx) => ctx.reply('pong'));

// —É—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const esc = (s) => String(s ?? '').replace(/[&<>]/g, (c) => ({'&':'&amp;','<':'&lt;','>':'&gt;'}[c]));
const fmt = (v) => v ? esc(v) : '‚Äî';
const who = (u) => {
  if (!u) return '‚Äî';
  const name = [u.first_name, u.last_name].filter(Boolean).join(' ');
  const un = u.username ? ` @${u.username}` : '';
  return `${esc(name)}${un} (id: <code>${u.id}</code>)`;
};

async function notifyAdmins(ctx, html) {
  const targets = ADMIN_CHAT_IDS.length ? ADMIN_CHAT_IDS : [ctx.chat.id]; // —Ñ–æ–ª–ª–±—ç–∫ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
  const extra = { parse_mode: 'HTML', disable_web_page_preview: true };
  if (ADMIN_THREAD_ID) extra.message_thread_id = ADMIN_THREAD_ID;

  let delivered = 0;
  for (const chatId of targets) {
    try {
      await ctx.telegram.sendMessage(chatId, html, extra);
      console.log('[notifyAdmins] sent to', chatId);
      delivered++;
    } catch (err) {
      console.error('[notifyAdmins] error to', chatId, err.message);
    }
  }
  return delivered;
}

// === –ø—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp (sendData) ===
bot.on(message('web_app_data'), async (ctx) => {
  const raw = ctx.message.web_app_data?.data || '';
  console.log('\n====[web_app_data received]====');
  console.log('From user:', ctx.from?.id, ctx.from?.username);
  console.log('Raw payload:', raw);

  let data = null;
  try {
    data = JSON.parse(raw);
  } catch (e) {
    console.error('‚ùå Failed to parse JSON:', e.message);
  }

  if (!data) {
    console.log('‚ö†Ô∏è No data received or failed to parse JSON');
    return ctx.reply('–î–∞–Ω–Ω—ã–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã.');
  }
  console.log('Parsed data:', data);

  const stamp = new Date().toLocaleString('ru-RU');
  if (!data || typeof data !== 'object') {
    await notifyAdmins(ctx, `<b>üì• web_app_data (raw)</b>\n<pre>${esc(raw)}</pre>\n\n<b>–û—Ç:</b> ${who(ctx.from)}\n<b>–í—Ä–µ–º—è:</b> ${esc(stamp)}`);
    return ctx.reply('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.');
  }

  // ---- –µ–¥–∏–Ω–∞—è "–ó–∞—è–≤–∫–∞" (–Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞) ----
  if (data.action === 'send_request') {
    const p = data.product || {};
    const html =
      `<b>üìù –ó–∞—è–≤–∫–∞</b>\n` +
      `<b>–ü—Ä–æ–¥—É–∫—Ç:</b> ${fmt(p.title)} (id: <code>${esc(p.id)}</code>)\n` +
      `\n<b>–û—Ç:</b> ${who(ctx.from)}\n<b>–í—Ä–µ–º—è:</b> ${esc(stamp)}\n` +
      `\n<pre>${esc(JSON.stringify(data, null, 2))}</pre>`;
    const ok = await notifyAdmins(ctx, html);
    return ctx.reply(ok ? `–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: ${ADMIN_CHAT_IDS.join(', ') || ctx.chat.id}` : '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚ùóÔ∏è');
  }

  if (data.action === 'send_request_form') {
    const p = data.product?.title || '‚Äî';
    const html =
      `<b>üìù –ó–∞—è–≤–∫–∞ (—Ñ–æ—Ä–º–∞)</b>\n` +
      `<b>–ü—Ä–æ–¥—É–∫—Ç:</b> ${fmt(p)}\n` +
      `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${fmt(data.phone)}\n` +
      `<b>–ò–º—è:</b> ${fmt(data.name)}\n` +
      `<b>Username (–ø–æ –∂–µ–ª–∞–Ω–∏—é):</b> ${data.include_username && data.username ? '@' + esc(data.username) : '‚Äî'}\n` +
      `\n<b>–û—Ç:</b> ${who(ctx.from)}\n<b>–í—Ä–µ–º—è:</b> ${esc(new Date().toLocaleString('ru-RU'))}`;
    const ok = await notifyAdmins(ctx, html);
    return ctx.reply(ok ? `–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: ${ADMIN_CHAT_IDS.join(', ') || ctx.chat.id}` : '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚ùóÔ∏è');
  }

  // === –∑–∞—è–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DEN-TMA ===
  if (data.type === 'lead') {
    const html =
      `<b>üìù –ó–∞—è–≤–∫–∞</b>\n` +
      `<b>–£—Å–ª—É–≥–∞:</b> ${fmt(data.service)}\n` +
      `<b>–ò–º—è:</b> ${fmt(data.name)}\n` +
      `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${fmt(data.phone)}\n` +
      `<b>–ì–æ—Ä–æ–¥:</b> ${fmt(data.city)}\n` +
      `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n${fmt(data.comment)}\n` +
      `\n<b>–û—Ç:</b> ${who(ctx.from)}\n<b>–í—Ä–µ–º—è:</b> ${new Date(data.ts || Date.now()).toLocaleString('ru-RU')}`;

    const ok = await notifyAdmins(ctx, html);
    return ctx.reply(ok ? '–ó–∞—è–≤–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ' : '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚ùóÔ∏è');
  }

  // ---- –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å) ----
  if (data.action === 'consult') {
    const p = data.product?.title || '–û–±—â–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è';
    const html =
      `<b>üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b>\n` +
      `<b>–ü—Ä–æ–¥—É–∫—Ç:</b> ${esc(p)}\n` +
      `<b>–ò–º—è:</b> ${fmt(data.name)}\n` +
      `<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${fmt(data.contact)}\n` +
      `<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n${fmt(data.message)}\n` +
      `\n<b>–û—Ç:</b> ${who(ctx.from)}\n<b>–í—Ä–µ–º—è:</b> ${esc(stamp)}\n` +
      `\n<pre>${esc(JSON.stringify(data, null, 2))}</pre>`;
    const ok = await notifyAdmins(ctx, html);
    return ctx.reply(ok ? `–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: ${ADMIN_CHAT_IDS.join(', ') || ctx.chat.id}` : '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚ùóÔ∏è');
  }

  // ---- –±—ç–∫–∞–ø –¥–ª—è —Å—Ç–∞—Ä–æ–π –∫–æ—Ä–∑–∏–Ω—ã ----
  if (data.action === 'send_cart') {
    const list = (data.items || []).map(i => `‚Ä¢ ${esc(i.title)} (<code>${esc(i.id)}</code>)`).join('\n') || '‚Äî';
    const html =
      `<b>üß∫ –ó–∞—è–≤–∫–∞ (–∫–æ—Ä–∑–∏–Ω–∞)</b>\n${list}\n\n<b>–û—Ç:</b> ${who(ctx.from)}\n<b>–í—Ä–µ–º—è:</b> ${esc(stamp)}\n` +
      `\n<pre>${esc(JSON.stringify(data, null, 2))}</pre>`;
    const ok = await notifyAdmins(ctx, html);
    return ctx.reply(ok ? `–ó–∞—è–≤–∫–∞ (–∫–æ—Ä–∑–∏–Ω–∞) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: ${ADMIN_CHAT_IDS.join(', ') || ctx.chat.id}` : '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚ùóÔ∏è');
  }

  // –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∫–∞–∫ –µ—Å—Ç—å
  const html = `<b>üì• –î–∞–Ω–Ω—ã–µ –∏–∑ –¢–ú–ê</b>\n<pre>${esc(JSON.stringify(data, null, 2))}</pre>\n\n<b>–û—Ç:</b> ${who(ctx.from)}\n<b>–í—Ä–µ–º—è:</b> ${esc(stamp)}`;
  const ok = await notifyAdmins(ctx, html);
  return ctx.reply(ok ? `–î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚úÖ\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤: ${ADMIN_CHAT_IDS.join(', ') || ctx.chat.id}` : '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚ùóÔ∏è');
});

// –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—Å—Ç–∞–≤–∏–º –æ–±—â–∏–π –ø—Ä–∏—ë–º message (–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–µ web_app_data)
bot.on('message', async (ctx) => {
  if (ctx.message?.web_app_data) return; // —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—ã—à–µ
  if ('text' in ctx.message) return;     // –∏–≥–Ω–æ—Ä –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
});

app.get('/debug', async (req, res) => {
  try {
    const info = await bot.telegram.getWebhookInfo();
    res.json(info);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});



app.use(express.json());

app.use(bot.webhookCallback('/bot'));

app.get('/', (req, res) => {
  res.send('Bot is running');
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  const webhookUrl = `${process.env.APP_URL}/bot`;
  try {
    await bot.telegram.setWebhook(webhookUrl);
    console.log(`‚úÖ Webhook set to ${webhookUrl}`);

    const me = await bot.telegram.getMe();
    console.log('[bot] logged in as @' + me.username, 'id=', me.id);
    console.log('[bot] ADMIN_CHAT_IDS =', ADMIN_CHAT_IDS);
  } catch (e) {
    console.error('‚ùå Failed to set webhook or get bot info:', e.message);
  }
});



process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
