// index.js
require('dotenv').config();
const { Telegraf } = require('telegraf');
const { message } = require('telegraf/filters');
const express = require('express');
const app = express();

const BOT_TOKEN = process.env.BOT_TOKEN;
const APP_URL = process.env.APP_URL;
const FRONTEND_URL = process.env.FRONTEND_URL;

if (!BOT_TOKEN) throw new Error('–ù–µ—Ç BOT_TOKEN –≤ .env');
if (!APP_URL) console.warn('‚ö†Ô∏è APP_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è');

const ADMIN_CHAT_IDS = (process.env.ADMIN_CHAT_IDS || '')
  .split(/[,\s]+/)
  .map(s => s.trim())
  .filter(Boolean)
  .map(Number)
  .filter(Number.isFinite);

const ADMIN_THREAD_ID = process.env.ADMIN_THREAD_ID ? Number(process.env.ADMIN_THREAD_ID) : null;

const bot = new Telegraf(BOT_TOKEN);

// === —É—Ç–∏–ª–∏—Ç—ã ===
const esc = (s) => String(s ?? '').replace(/[&<>]/g, (c) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;' }[c]));
const fmt = (v) => v ? esc(v) : '‚Äî';
const who = (u) => {
  if (!u) return '‚Äî';
  const name = [u.first_name, u.last_name].filter(Boolean).join(' ');
  const un = u.username ? ` @${u.username}` : '';
  return `${esc(name)}${un}`;
};

// === —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º ===
async function notifyAdmins(ctx, html) {
  const targets = ADMIN_CHAT_IDS.length ? ADMIN_CHAT_IDS : [ctx.chat.id];
  const extra = { parse_mode: 'HTML', disable_web_page_preview: true };
  if (ADMIN_THREAD_ID) extra.message_thread_id = ADMIN_THREAD_ID;

  let delivered = 0;
  for (const chatId of targets) {
    try {
      console.log(`[notifyAdmins] sending ‚Üí ${chatId}`);
      await ctx.telegram.sendMessage(chatId, html, extra);
      console.log(`[notifyAdmins] success ‚Üí ${chatId}`);
      delivered++;
    } catch (err) {
      console.error(`[notifyAdmins] failed ‚Üí ${chatId}`, err.message);
    }
  }
  return delivered;
}

// === /start ===
bot.start((ctx) => {
  return ctx.reply('üìÇ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–ö–∞—Ç–∞–ª–æ–≥', web_app: { url: FRONTEND_URL } }]
      ]
    }
  });
});

// === test_admin ===
bot.command('test_admin', async (ctx) => {
  const html = `<b>üîî –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–û—Ç: ${who(ctx.from)}`;
  const ok = await notifyAdmins(ctx, html);
  return ctx.reply(ok > 0 ? `‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${ok} –∞–¥–º–∏–Ω—É(–∞–º)` : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å');
});

// === –ø—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp ===
bot.on(message('web_app_data'), async (ctx) => {
  console.log('\n==== [web_app_data received] ====');
  console.log('[from.id]:', ctx.from?.id, 'username:', ctx.from?.username);
  console.log('[raw payload]:', ctx.message.web_app_data?.data);
  console.log('[ctx.message]:', JSON.stringify(ctx.message, null, 2));
  let data = null;
  try {

    data = JSON.parse(ctx.message.web_app_data.data);
    console.log('[parsed payload]:', data);
  } catch (err) {
    console.error('‚ùå JSON parse error:', err.message);
  }

  if (!data) {
    console.warn('[handler] payload empty ‚Üí reply to user');
    return ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã.');
  }

  const stamp = new Date().toLocaleString('ru-RU');
  let html = '';

  // === —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞—è–≤–æ–∫ ===
  if (data.action === 'send_request' || data.action === 'send_request_form') {
    html =
      `üìÑ <b>–ó–∞—è–≤–∫–∞ (—Ñ–æ—Ä–º–∞)</b>\n` +
      `<b>–ò–º—è:</b> ${fmt(data.name)}\n` +
      `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${fmt(data.phone)}\n` +
      (data.comment ? `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${fmt(data.comment)}\n` : '') +
      (data.selected || data.product?.title ? `<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:</b> ${fmt(data.selected || data.product.title)}\n` : '');
  }
  else if (data.type === 'lead' || data.action === 'consult') {
    html =
      `üí¨ <b>–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n` +
      `<b>–ò–º—è:</b> ${fmt(data.name)}\n` +
      `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${fmt(data.phone)}\n` +
      (data.comment ? `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${fmt(data.comment)}\n` : '');
  } 

 
  else {
    html =
      `üì• <b>–î–∞–Ω–Ω—ã–µ –∏–∑ –¢–ú–ê</b>\n` +
      `<pre>${esc(JSON.stringify(data, null, 2))}</pre>`;
  }

  html += `\n\n<b>–û—Ç:</b> ${who(ctx.from)}\n<b>–í—Ä–µ–º—è:</b> ${esc(stamp)}`;

  const ok = await notifyAdmins(ctx, html);

  console.log('[notifyAdmins] delivered =', ok);

  return ctx.reply(ok > 0
    ? '‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!'
    : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
});

// === Express + webhook ===
// === Express + webhook ===
app.use(express.json());
app.use(bot.webhookCallback('/bot'));

app.get('/', (req, res) => res.send('Bot is running'));
app.get('/debug', async (req, res) => {
  try {
    const info = await bot.telegram.getWebhookInfo();
    res.json(info);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`üöÄ Server running on port ${PORT}`);

  if (APP_URL) {
    const webhookUrl = `${APP_URL}/bot`;
    try {
      const info = await bot.telegram.getWebhookInfo();

      if (info.url !== webhookUrl) {
        await bot.telegram.setWebhook(webhookUrl);
        console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
      } else {
        console.log(`‚ÑπÔ∏è Webhook —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω: ${webhookUrl}`);
      }

      const me = await bot.telegram.getMe();
      console.log(`[bot] logged in as @${me.username}, id=${me.id}`);
      console.log(`[bot] ADMIN_CHAT_IDS =`, ADMIN_CHAT_IDS);
    } catch (e) {
      console.error('‚ùå Failed to set webhook automatically:', e.message);
    }
  }
});

