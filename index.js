require('dotenv').config();
const { Telegraf } = require('telegraf');
const { message } = require('telegraf/filters');
const express = require('express');
const cors = require('cors'); // ‚Üê —Ä–µ–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º
const app = express();

const CHANNEL_ID = process.env.CHANNEL_ID || null;
const CHANNEL_THREAD_ID = process.env.CHANNEL_THREAD_ID ? Number(process.env.CHANNEL_THREAD_ID) : null;
const BOT_TOKEN = process.env.BOT_TOKEN;
const APP_URL = process.env.APP_URL;
const FRONTEND_URL = process.env.FRONTEND_URL;


const ADMIN_CHAT_IDS = (process.env.ADMIN_CHAT_IDS || '')
  .split(/[,\s]+/)
  .map(s => s.trim())
  .filter(Boolean)
  .map(Number)
  .filter(Number.isFinite);

const ADMIN_THREAD_ID = process.env.ADMIN_THREAD_ID ? Number(process.env.ADMIN_THREAD_ID) : null;

if (!BOT_TOKEN) throw new Error('–ù–µ—Ç BOT_TOKEN –≤ .env');
if (!APP_URL) console.warn('‚ö†Ô∏è APP_URL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –≤–µ–±—Ö—É–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è');
if (!ADMIN_CHAT_IDS.length) console.warn('‚ö†Ô∏è ADMIN_CHAT_IDS –ø—É—Å—Ç ‚Äî /lead –Ω–µ —Å–º–æ–∂–µ—Ç –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É.');

const bot = new Telegraf(BOT_TOKEN);

// === —É—Ç–∏–ª–∏—Ç—ã ===
const esc = (s) => String(s ?? '').replace(/[&<>]/g, (c) => ({ '&': '&amp;', '<': '&lt;', '>': '&gt;' }[c]));
const fmt = (v) => v ? esc(v) : '‚Äî';
const who = (u) => {
  if (!u) return '‚Äî';
  const name = [u.first_name, u.last_name].filter(Boolean).join(' ');
  const un = u.username ? ` @${u.username}` : '';
  return `${esc(name)}${un}`;
};

function isAdmin(id) {
  return ADMIN_CHAT_IDS.includes(Number(id));
}

// === —Ä–∞—Å—Å—ã–ª–∫–∞ –∞–¥–º–∏–Ω–∞–º ===
async function notifyAdmins(ctx, html) {
  const targets = ADMIN_CHAT_IDS.length ? ADMIN_CHAT_IDS : [ctx.chat.id];
  const extra = { parse_mode: 'HTML', disable_web_page_preview: true };
  if (ADMIN_THREAD_ID) extra.message_thread_id = ADMIN_THREAD_ID;

  let delivered = 0;
  for (const chatId of targets) {
    try {
      console.log(`[notifyAdmins] sending ‚Üí ${chatId}`);
      await ctx.telegram.sendMessage(chatId, html, extra);
      console.log(`[notifyAdmins] success ‚Üí ${chatId}`);
      delivered++;
    } catch (err) {
      console.error(`[notifyAdmins] failed ‚Üí ${chatId}`, err.message);
    }
  }
  return delivered;
}

// === /start ===
bot.start(async (ctx) => {
  // –æ–±—â–∏–π –ø—Ä–∏–≤–µ—Ç + –∫–Ω–æ–ø–∫–∞ –Ω–∞ TMA
  await ctx.reply('üìÇ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —É—Å–ª—É–≥:', {
    reply_markup: {
      inline_keyboard: [[{ text: '–ö–∞—Ç–∞–ª–æ–≥', web_app: { url: FRONTEND_URL } }]]
    }
  });

  // –µ—Å–ª–∏ —ç—Ç–æ –õ–° —Å –∞–¥–º–∏–Ω–æ–º ‚Äî –ø—Ä–∏—à–ª—ë–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
  if (ctx.chat?.type === 'private' && isAdmin(ctx.from?.id)) {
    const info = [
      'üõ† <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞</b>',
      '',
      '1) –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ <i>(–º–æ–∂–Ω–æ –ø—Ä—è–º–æ –≤ –¢–µ–ª–µ–≥—Ä–∞–º)</i>.',
      '2) –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø–æ—Å—Ç —Å —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å (—ç—Ç–æ –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞).',
      '3) –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ:',
      '<code>/post –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://example.com</code>',
      '',
      'üëâ –ö—É–¥–∞ —É–π–¥—ë—Ç –ø–æ—Å—Ç:',
      CHANNEL_ID
        ? `‚Ä¢ –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∫–∞–Ω–∞–ª/—á–∞—Ç: <code>${CHANNEL_ID}</code>${CHANNEL_THREAD_ID ? ` (—Ç–æ–ø–∏–∫ ${CHANNEL_THREAD_ID})` : ''}`
        : '‚Ä¢ –í —Ç–æ—Ç —á–∞—Ç, –≥–¥–µ –≤—ã –≤—ã–∑–≤–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É',
      '',
      '–ü—Ä–∏–º–µ—Ä—ã:',
      '‚Ä¢ <code>/post –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ | https://t.me/PromouteBot?startapp=catalog</code> (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º)',
      '‚Ä¢ <code>/post –ó–∞–ø–∏—Å–∞—Ç—å—Å—è | https://site.ru</code> (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é)',
    ].join('\n');
    await ctx.reply(info, { parse_mode: 'HTML', disable_web_page_preview: true });
  }
});


// === test_admin ===
bot.command('test_admin', async (ctx) => {
  const html = `<b>üîî –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n\n–û—Ç: ${who(ctx.from)}`;
  const ok = await notifyAdmins(ctx, html);
  return ctx.reply(ok > 0 ? `‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${ok} –∞–¥–º–∏–Ω—É(–∞–º)` : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å');
});

let RUNTIME_CHANNEL_ID = CHANNEL_ID;

bot.command('where', (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.reply('üö´');
  ctx.reply(
    [
      `ENV CHANNEL_ID: ${CHANNEL_ID || '‚Äî'}`,
      `RUNTIME_CHANNEL_ID: ${RUNTIME_CHANNEL_ID || '‚Äî'}`,
      `THREAD_ID: ${CHANNEL_THREAD_ID || '‚Äî'}`
    ].join('\n')
  );
});

// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª
bot.command('post_test', async (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.reply('üö´');
  const target = RUNTIME_CHANNEL_ID || ctx.chat.id;
  try {
    await sendPost(
      {
        chatId: target,
        threadId: CHANNEL_THREAD_ID || undefined,
        text: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç ‚úÖ\n–ï—Å–ª–∏ –≤—ã —ç—Ç–æ –≤–∏–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ ‚Äî –≤—Å—ë –æ–∫.',
        buttonText: '–û—Ç–∫—Ä—ã—Ç—å',
        buttonUrl: 'https://example.com'
      },
      ctx.telegram
    );
    ctx.reply(`‚úÖ –£—à–ª–æ –≤ ${target}${CHANNEL_THREAD_ID ? ` (—Ç–æ–ø–∏–∫ ${CHANNEL_THREAD_ID})` : ''}`);
  } catch (e) {
    // –ø–æ–∫–∞–∂–µ–º —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –¢–µ–ª–µ–≥—Ä–∞–º–∞
    ctx.reply(`‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å: ${e.description || e.message}`);
  }
});

bot.command('bind', (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.reply('üö´');
  const fwd = ctx.message.reply_to_message?.forward_from_chat;
  if (!fwd) return ctx.reply('–°–¥–µ–ª–∞–π—Ç–µ /bind –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –ü–ï–†–ï–°–õ–ê–ù–ù–û–ï –∏–∑ –∫–∞–Ω–∞–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
  RUNTIME_CHANNEL_ID = fwd.id; // –Ω–∞–ø—Ä–∏–º–µ—Ä -100xxxxxxxxxx
  ctx.reply(`‚úÖ –ü—Ä–∏–≤—è–∑–∞–ª –∫–∞–Ω–∞–ª: ${RUNTIME_CHANNEL_ID}`);
});

// –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞: /set_channel -100123.. –∏–ª–∏ /set_channel @username
bot.command('set_channel', (ctx) => {
  if (!isAdmin(ctx.from.id)) return ctx.reply('üö´');
  const arg = ctx.message.text.replace(/^\/set_channel(@\w+)?\s+/, '').trim();
  if (!arg) return ctx.reply('–£–∫–∞–∂–∏ id –∫–∞–Ω–∞–ª–∞ (-100‚Ä¶) –∏–ª–∏ @username.');
  RUNTIME_CHANNEL_ID = arg.startsWith('@') ? arg : Number(arg);
  ctx.reply(`‚úîÔ∏è –¢–µ–ø–µ—Ä—å –ø—É–±–ª–∏–∫—É–µ–º –≤: ${RUNTIME_CHANNEL_ID}`);
});

bot.command('post', async (ctx) => {
  try {
    if (!isAdmin(ctx.from?.id)) {
      return ctx.reply('üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
    }

    const raw = ctx.message.text.replace(/^\/post(@\w+)?\s*/i, '');
    const [firstLine, ...restLines] = raw.split('\n');
    const { text: btnText, url: btnUrl } = parseBtn(firstLine);

    // —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: –∏–∑ —Ö–≤–æ—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ —Ä–µ–ø–ª–∞—è (text/caption)
    let postText = restLines.join('\n').trim();
    const reply = ctx.message.reply_to_message;

    // –µ—Å–ª–∏ –Ω–µ –≤–≤–µ–ª–∏ –ø–æ—Å—Ç —Ç–µ–∫—Å—Ç–æ–º –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ ‚Äî –∑–∞–±–∏—Ä–∞–µ–º –∏–∑ —Ä–µ–ø–ª–∞—è
    if (!postText && reply) {
      postText = (reply.caption || reply.text || '').trim();
    }

    // –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Ä–µ–ø–ª–∞–µ
    let photoFileId = null;
    if (reply?.photo?.length) {
      const p = pickLargestPhoto(reply.photo);
      photoFileId = p?.file_id || null;
    }

    if (!btnText || !btnUrl || !postText) {
      return ctx.reply(
        '–§–æ—Ä–º–∞—Ç:\n' +
        '/post –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | https://example.com\\n–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞\n' +
        '–ò–õ–ò –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /post –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ—Ç–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º/—Ñ–æ—Ç–æ+–ø–æ–¥–ø–∏—Å—å—é.',
        { disable_web_page_preview: true }
      );
    }

    // –∫—É–¥–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
    const targetChatId = (typeof RUNTIME_CHANNEL_ID !== 'undefined' && RUNTIME_CHANNEL_ID) || CHANNEL_ID || ctx.chat.id;
    const threadId = CHANNEL_THREAD_ID || undefined;

    await sendPost(
      { chatId: targetChatId, threadId, text: postText, buttonText: btnText, buttonUrl: btnUrl, photoFileId },
      ctx.telegram
    );

    return ctx.reply(`‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ ${targetChatId}${threadId ? ` (—Ç–æ–ø–∏–∫ ${threadId})` : ''}`);
  } catch (e) {
    console.error('post error:', e);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + (e.description || e.message));
  }
});
  

// === –ø—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp ===
bot.on(message('web_app_data'), async (ctx) => {
  console.log('\n==== [web_app_data received] ====');
  console.log('[from.id]:', ctx.from?.id, 'username:', ctx.from?.username);
  console.log('[raw payload]:', ctx.message.web_app_data?.data);
  console.log('[ctx.message]:', JSON.stringify(ctx.message, null, 2));
  let data = null;
  try {

    data = JSON.parse(ctx.message.web_app_data.data);
    console.log('[parsed payload]:', data);
  } catch (err) {
    console.error('‚ùå JSON parse error:', err.message);
  }

  if (!data) {
    console.warn('[handler] payload empty ‚Üí reply to user');
    return ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã.');
  }

  const stamp = new Date().toLocaleString('ru-RU');
  let html = '';

  // === —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞—è–≤–æ–∫ ===
  if (data.action === 'send_request' || data.action === 'send_request_form') {
    html =
      `üìÑ <b>–ó–∞—è–≤–∫–∞ (—Ñ–æ—Ä–º–∞)</b>\n` +
      `<b>–ò–º—è:</b> ${fmt(data.name)}\n` +
      `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${fmt(data.phone)}\n` +
      (data.comment ? `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${fmt(data.comment)}\n` : '') +
      (data.selected || data.product?.title ? `<b>–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç:</b> ${fmt(data.selected || data.product.title)}\n` : '');
  }
  else if (data.type === 'lead' || data.action === 'consult') {
    html =
      `üí¨ <b>–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n` +
      `<b>–ò–º—è:</b> ${fmt(data.name)}\n` +
      `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${fmt(data.phone)}\n` +
      (data.comment ? `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${fmt(data.comment)}\n` : '');
  } 

 
  else {
    html =
      `üì• <b>–î–∞–Ω–Ω—ã–µ –∏–∑ –¢–ú–ê</b>\n` +
      `<pre>${esc(JSON.stringify(data, null, 2))}</pre>`;
  }

  html += `\n\n<b>–û—Ç:</b> ${who(ctx.from)}\n<b>–í—Ä–µ–º—è:</b> ${esc(stamp)}`;

  const ok = await notifyAdmins(ctx, html);

  console.log('[notifyAdmins] delivered =', ok);

  return ctx.reply(ok > 0
    ? '‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!'
    : '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
});

// === Express + webhook ===
app.use(express.json());
app.use(bot.webhookCallback('/bot'));
app.use(cors({
  origin: FRONTEND_URL ? [FRONTEND_URL] : true,
  methods: ['GET','POST'],
  allowedHeaders: ['Content-Type'],
}));

function parseBtn(line) {
  const [t, u] = (line || '').split('|');
  const text = (t || '').trim();
  const url = (u || '').trim();
  return { text, url };
}

function pickLargestPhoto(sizes) {
  if (!Array.isArray(sizes) || !sizes.length) return null;
  return sizes.reduce((a, b) => (a.file_size || 0) > (b.file_size || 0) ? a : b);
}

app.post('/lead', async (req, res) => {
  try {
    const data = req.body;
    console.log('\n==== [lead received] ====');
    console.log('[payload]:', data);

    if (!ADMIN_CHAT_IDS.length) {
      return res.status(400).json({ ok: false, error: 'ADMIN_CHAT_IDS is empty' });
    }

    const stamp = new Date().toLocaleString('ru-RU');
    let html = '';

    if (data.action === 'send_request_form') {
      html =
        `üìÑ <b>–ó–∞—è–≤–∫–∞ (—Ñ–æ—Ä–º–∞)</b>\n` +
        `<b>–ò–º—è:</b> ${fmt(data.name)}\n` +
        `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${fmt(data.phone)}\n` +
        (data.comment ? `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${fmt(data.comment)}\n` : '') +
        (data.service ? `<b>–£—Å–ª—É–≥–∞:</b> ${fmt(data.service)}\n` : '');
    } 
    else if (data.action === 'consult') {
      html =
        `üí¨ <b>–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>\n` +
        `<b>–ò–º—è:</b> ${fmt(data.name)}\n` +
        `<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> ${fmt(data.contact)}\n` +
        (data.message ? `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${fmt(data.message)}\n` : '');
    }
    else {
      html =
        `üì• <b>–î–∞–Ω–Ω—ã–µ –∏–∑ –¢–ú–ê</b>\n` +
        `<pre>${esc(JSON.stringify(data, null, 2))}</pre>`;
    }

    html += `\n\n<b>–í—Ä–µ–º—è:</b> ${esc(stamp)}`;

    const ok = await notifyAdmins({ telegram: bot.telegram, chat: { id: ADMIN_CHAT_IDS[0] } }, html);
    console.log('[notifyAdmins] delivered =', ok);
    res.json({ ok: true, delivered: ok });
  } catch (err) {
    console.error('‚ùå /lead error:', err);
    res.status(500).json({ ok: false, error: err.message });
  }
});

async function sendPost({ chatId, threadId, text, buttonText, buttonUrl, photoFileId }, tg) {
  if (!buttonText || !buttonUrl) throw new Error('–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ URL');
  if (!/^https?:\/\//i.test(buttonUrl)) throw new Error('URL –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http(s)://');

  const baseExtra = {
    parse_mode: 'HTML',
    disable_web_page_preview: false,
    reply_markup: { inline_keyboard: [[{ text: buttonText, url: buttonUrl }]] }
  };

  const tryOnce = async (withThread) => {
    const extra = withThread && threadId ? { ...baseExtra, message_thread_id: threadId } : baseExtra;
    if (photoFileId) {
      return tg.sendPhoto(chatId, photoFileId, { caption: text, ...extra });
    }
    return tg.sendMessage(chatId, text, extra);
  };

  try {
    return await tryOnce(true);      // –ø—Ä–æ–±—É–µ–º —Å threadId (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
  } catch (e) {
    const msg = String(e.description || e.message || '').toLowerCase();
    const threadProblem =
      msg.includes('message_thread_id') ||
      msg.includes('topic') ||
      msg.includes('forum') ||
      msg.includes('thread');

    if (threadId && threadProblem) {
      // –ø–æ–≤—Ç–æ—Ä –±–µ–∑ threadId ‚Äî –Ω—É–∂–Ω–æ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
      return await tryOnce(false);
    }
    throw e;
  }
}

app.get('/', (req, res) => res.send('Bot is running'));
app.get('/debug', async (req, res) => {
  try {
    const info = await bot.telegram.getWebhookInfo();
    res.json(info);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`üöÄ Server running on port ${PORT}`);

  if (APP_URL) {
    const webhookUrl = `${APP_URL}/bot`;
    try {
      const info = await bot.telegram.getWebhookInfo();

      if (info.url !== webhookUrl) {
        await bot.telegram.setWebhook(webhookUrl);
        console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${webhookUrl}`);
      } else {
        console.log(`‚ÑπÔ∏è Webhook —É–∂–µ –∞–∫—Ç—É–∞–ª–µ–Ω: ${webhookUrl}`);
      }

      const me = await bot.telegram.getMe();
      console.log(`[bot] logged in as @${me.username}, id=${me.id}`);
      console.log(`[bot] ADMIN_CHAT_IDS =`, ADMIN_CHAT_IDS);
    } catch (e) {
      console.error('‚ùå Failed to set webhook automatically:', e.message);
    }
  }
});

